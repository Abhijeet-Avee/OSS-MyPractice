package sinlgeton.dp.issues;

import java.io.Serializable;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;

class Singleton9 implements Serializable, Cloneable {
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private static volatile Singleton9 singleton1 = null;

	private Singleton9() {
	}

	public static Singleton9 getSingleton9() {
		if (singleton1 == null) {
			if (singleton1 == null) {
				synchronized (Singleton9.class) {
					singleton1 = new Singleton9();
				}
			}
		}
		return singleton1;
	}

	private Object readResolve() {
		return singleton1;
	}

	@Override
	protected Object clone() throws CloneNotSupportedException {
		return singleton1;
	}
}

public class SingletonDP9 {
	public static void main(String[] args) throws CloneNotSupportedException, ClassNotFoundException,
			InstantiationException, IllegalAccessException, IllegalArgumentException, InvocationTargetException {
		// Dynamic class loading
		Class class1 = Class.forName("sinlgeton.dp.issues.Singleton9");
		Constructor[] constructors = class1.getDeclaredConstructors();
		constructors[0].setAccessible(true);
		Singleton9 singleton2 = (Singleton9) constructors[0].newInstance();
		
	}
}
