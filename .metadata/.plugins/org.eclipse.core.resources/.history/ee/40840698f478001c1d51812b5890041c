package multithreading;

public class DemoDeadLock {
	public static void main(String[] args) {
		final String r1 = "resource1";
		final String r2 = "resource2";
		
		Thread thread1 = new Thread(new Runnable() {

			@Override
			public void run() {
				synchronized(r1) {
					System.out.println("Thread1 get lock on r1");
					try {
						Thread.sleep(100);
					} catch (InterruptedException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
					synchronized(r2) {
						System.out.println("Thread1 get lock on r2");
					}
				}
			}
			
		});
		Thread thread2 = new Thread(new Runnable() {

			@Override
			public void run() {
				synchronized(r2) {
					System.out.println("Thread2 get lock on r2");
					try {
						Thread.sleep(100);
					} catch (InterruptedException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
					synchronized(r1) {
						System.out.println("Thread2 get lock on r1");
					}
				}
			}		
		});
		thread1.start();
		thread2.start();
	}
}
